package types

import (
	sdk "github.com/cosmos/cosmos-sdk/types"
	"github.com/ethereum/go-ethereum/common"
	"reflect"
	"testing"
)

func TestAddressCodeHashKey(t *testing.T) {
	tests := []struct {
		name          string
		address       common.Address
		accountNumber uint64
		want          []byte
	}{
		{
			name: "normal",
			address: common.BytesToAddress([]byte{
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10,
				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20,
			}),
			accountNumber: sdk.BigEndianToUint64([]byte{
				0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
			}),
			want: []byte{
				KeyPrefixCodeHash[0],
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10,
				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20,
				0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
			},
		},
		{
			name: "account number is 8 bytes key length",
			address: common.BytesToAddress([]byte{
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10,
				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20,
			}),
			accountNumber: sdk.BigEndianToUint64([]byte{
				0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
			}),
			want: []byte{
				KeyPrefixCodeHash[0],
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10,
				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20,
				0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, // 8 bytes of account number, no prefix
			},
		},
		{
			name: "account number is 7 bytes length",
			address: common.BytesToAddress([]byte{
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10,
				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20,
			}),
			accountNumber: sdk.BigEndianToUint64([]byte{
				0x00,
				0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
			}),
			want: []byte{
				KeyPrefixCodeHash[0],
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10,
				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20,
				0x00,                                     // 1 bytes prefix of account number
				0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, // 7 bytes account number
			},
		},
		{
			name: "account number is 6 bytes length",
			address: common.BytesToAddress([]byte{
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10,
				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20,
			}),
			accountNumber: sdk.BigEndianToUint64([]byte{
				0x00, 0x00,
				0x21, 0x22, 0x23, 0x24, 0x25, 0x26,
			}),
			want: []byte{
				KeyPrefixCodeHash[0],
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10,
				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20,
				0x00, 0x00, // 2 bytes prefix of account number
				0x21, 0x22, 0x23, 0x24, 0x25, 0x26, // 6 bytes account number
			},
		},
		{
			name: "account number is 0 bytes length",
			address: common.BytesToAddress([]byte{
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10,
				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20,
			}),
			accountNumber: 0,
			want: []byte{
				KeyPrefixCodeHash[0],
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10,
				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 8 bytes prefix of account number
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := AddressCodeHashKey(tt.address, tt.accountNumber); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("AddressCodeHashPrefix() = %v, want %v", got, tt.want)
			}
		})
	}
}
