// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evermint/cpc/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryCustomPrecompiledContractsRequest is the request type for the Query/CustomPrecompiledContracts RPC
// method.
type QueryCustomPrecompiledContractsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCustomPrecompiledContractsRequest) Reset() {
	*m = QueryCustomPrecompiledContractsRequest{}
}
func (m *QueryCustomPrecompiledContractsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCustomPrecompiledContractsRequest) ProtoMessage()    {}
func (*QueryCustomPrecompiledContractsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca8cc3676f804fa3, []int{0}
}
func (m *QueryCustomPrecompiledContractsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCustomPrecompiledContractsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCustomPrecompiledContractsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCustomPrecompiledContractsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCustomPrecompiledContractsRequest.Merge(m, src)
}
func (m *QueryCustomPrecompiledContractsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCustomPrecompiledContractsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCustomPrecompiledContractsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCustomPrecompiledContractsRequest proto.InternalMessageInfo

func (m *QueryCustomPrecompiledContractsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type WrappedCustomPrecompiledContractMeta struct {
	// address is the ethereum hex address of the custom precompiled contract.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// type_name is the friendly name of the custom precompiled contract type.
	TypeName string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// meta is the custom precompiled contract meta
	Meta CustomPrecompiledContractMeta `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta"`
}

func (m *WrappedCustomPrecompiledContractMeta) Reset()         { *m = WrappedCustomPrecompiledContractMeta{} }
func (m *WrappedCustomPrecompiledContractMeta) String() string { return proto.CompactTextString(m) }
func (*WrappedCustomPrecompiledContractMeta) ProtoMessage()    {}
func (*WrappedCustomPrecompiledContractMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca8cc3676f804fa3, []int{1}
}
func (m *WrappedCustomPrecompiledContractMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WrappedCustomPrecompiledContractMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WrappedCustomPrecompiledContractMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WrappedCustomPrecompiledContractMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrappedCustomPrecompiledContractMeta.Merge(m, src)
}
func (m *WrappedCustomPrecompiledContractMeta) XXX_Size() int {
	return m.Size()
}
func (m *WrappedCustomPrecompiledContractMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_WrappedCustomPrecompiledContractMeta.DiscardUnknown(m)
}

var xxx_messageInfo_WrappedCustomPrecompiledContractMeta proto.InternalMessageInfo

func (m *WrappedCustomPrecompiledContractMeta) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WrappedCustomPrecompiledContractMeta) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *WrappedCustomPrecompiledContractMeta) GetMeta() CustomPrecompiledContractMeta {
	if m != nil {
		return m.Meta
	}
	return CustomPrecompiledContractMeta{}
}

// QueryCustomPrecompiledContractsResponse is the response type for the Query/CustomPrecompiledContracts RPC
// method.
type QueryCustomPrecompiledContractsResponse struct {
	// contracts is a slice of deployed custom precompiled contracts.
	Contracts []WrappedCustomPrecompiledContractMeta `protobuf:"bytes,1,rep,name=contracts,proto3" json:"contracts"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCustomPrecompiledContractsResponse) Reset() {
	*m = QueryCustomPrecompiledContractsResponse{}
}
func (m *QueryCustomPrecompiledContractsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCustomPrecompiledContractsResponse) ProtoMessage()    {}
func (*QueryCustomPrecompiledContractsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca8cc3676f804fa3, []int{2}
}
func (m *QueryCustomPrecompiledContractsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCustomPrecompiledContractsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCustomPrecompiledContractsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCustomPrecompiledContractsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCustomPrecompiledContractsResponse.Merge(m, src)
}
func (m *QueryCustomPrecompiledContractsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCustomPrecompiledContractsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCustomPrecompiledContractsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCustomPrecompiledContractsResponse proto.InternalMessageInfo

func (m *QueryCustomPrecompiledContractsResponse) GetContracts() []WrappedCustomPrecompiledContractMeta {
	if m != nil {
		return m.Contracts
	}
	return nil
}

func (m *QueryCustomPrecompiledContractsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryCustomPrecompiledContractRequest is the request type for the Query/CustomPrecompiledContract RPC
// method.
type QueryCustomPrecompiledContractRequest struct {
	// address is the ethereum hex address to query the custom precompiled contract for.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryCustomPrecompiledContractRequest) Reset()         { *m = QueryCustomPrecompiledContractRequest{} }
func (m *QueryCustomPrecompiledContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCustomPrecompiledContractRequest) ProtoMessage()    {}
func (*QueryCustomPrecompiledContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca8cc3676f804fa3, []int{3}
}
func (m *QueryCustomPrecompiledContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCustomPrecompiledContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCustomPrecompiledContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCustomPrecompiledContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCustomPrecompiledContractRequest.Merge(m, src)
}
func (m *QueryCustomPrecompiledContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCustomPrecompiledContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCustomPrecompiledContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCustomPrecompiledContractRequest proto.InternalMessageInfo

func (m *QueryCustomPrecompiledContractRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryCustomPrecompiledContractResponse is the response type for the Query/CustomPrecompiledContract RPC
// method.
type QueryCustomPrecompiledContractResponse struct {
	// contract is the deployed custom precompiled contract
	Contract WrappedCustomPrecompiledContractMeta `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract"`
}

func (m *QueryCustomPrecompiledContractResponse) Reset() {
	*m = QueryCustomPrecompiledContractResponse{}
}
func (m *QueryCustomPrecompiledContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCustomPrecompiledContractResponse) ProtoMessage()    {}
func (*QueryCustomPrecompiledContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca8cc3676f804fa3, []int{4}
}
func (m *QueryCustomPrecompiledContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCustomPrecompiledContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCustomPrecompiledContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCustomPrecompiledContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCustomPrecompiledContractResponse.Merge(m, src)
}
func (m *QueryCustomPrecompiledContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCustomPrecompiledContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCustomPrecompiledContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCustomPrecompiledContractResponse proto.InternalMessageInfo

func (m *QueryCustomPrecompiledContractResponse) GetContract() WrappedCustomPrecompiledContractMeta {
	if m != nil {
		return m.Contract
	}
	return WrappedCustomPrecompiledContractMeta{}
}

// QueryErc20CustomPrecompiledContractByDenomRequest is the request type for the Query/Erc20CustomPrecompiledContractByDenom RPC
// method.
type QueryErc20CustomPrecompiledContractByDenomRequest struct {
	// min_denom is the minimum denomination to query the custom precompiled contract for.
	MinDenom string `protobuf:"bytes,1,opt,name=min_denom,json=minDenom,proto3" json:"min_denom,omitempty"`
}

func (m *QueryErc20CustomPrecompiledContractByDenomRequest) Reset() {
	*m = QueryErc20CustomPrecompiledContractByDenomRequest{}
}
func (m *QueryErc20CustomPrecompiledContractByDenomRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryErc20CustomPrecompiledContractByDenomRequest) ProtoMessage() {}
func (*QueryErc20CustomPrecompiledContractByDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca8cc3676f804fa3, []int{5}
}
func (m *QueryErc20CustomPrecompiledContractByDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryErc20CustomPrecompiledContractByDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryErc20CustomPrecompiledContractByDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryErc20CustomPrecompiledContractByDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryErc20CustomPrecompiledContractByDenomRequest.Merge(m, src)
}
func (m *QueryErc20CustomPrecompiledContractByDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryErc20CustomPrecompiledContractByDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryErc20CustomPrecompiledContractByDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryErc20CustomPrecompiledContractByDenomRequest proto.InternalMessageInfo

func (m *QueryErc20CustomPrecompiledContractByDenomRequest) GetMinDenom() string {
	if m != nil {
		return m.MinDenom
	}
	return ""
}

// QueryErc20CustomPrecompiledContractByDenomResponse is the response type for the Query/Erc20CustomPrecompiledContractByDenom RPC
// method.
type QueryErc20CustomPrecompiledContractByDenomResponse struct {
	Contract WrappedCustomPrecompiledContractMeta `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract"`
}

func (m *QueryErc20CustomPrecompiledContractByDenomResponse) Reset() {
	*m = QueryErc20CustomPrecompiledContractByDenomResponse{}
}
func (m *QueryErc20CustomPrecompiledContractByDenomResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryErc20CustomPrecompiledContractByDenomResponse) ProtoMessage() {}
func (*QueryErc20CustomPrecompiledContractByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca8cc3676f804fa3, []int{6}
}
func (m *QueryErc20CustomPrecompiledContractByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryErc20CustomPrecompiledContractByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryErc20CustomPrecompiledContractByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryErc20CustomPrecompiledContractByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryErc20CustomPrecompiledContractByDenomResponse.Merge(m, src)
}
func (m *QueryErc20CustomPrecompiledContractByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryErc20CustomPrecompiledContractByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryErc20CustomPrecompiledContractByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryErc20CustomPrecompiledContractByDenomResponse proto.InternalMessageInfo

func (m *QueryErc20CustomPrecompiledContractByDenomResponse) GetContract() WrappedCustomPrecompiledContractMeta {
	if m != nil {
		return m.Contract
	}
	return WrappedCustomPrecompiledContractMeta{}
}

// QueryParamsRequest defines the request type for querying x/cpc module parameters.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca8cc3676f804fa3, []int{7}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse defines the response type for querying x/cpc module parameters.
type QueryParamsResponse struct {
	// params define the cpc module parameters.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca8cc3676f804fa3, []int{8}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryCustomPrecompiledContractsRequest)(nil), "evermint.cpc.v1.QueryCustomPrecompiledContractsRequest")
	proto.RegisterType((*WrappedCustomPrecompiledContractMeta)(nil), "evermint.cpc.v1.WrappedCustomPrecompiledContractMeta")
	proto.RegisterType((*QueryCustomPrecompiledContractsResponse)(nil), "evermint.cpc.v1.QueryCustomPrecompiledContractsResponse")
	proto.RegisterType((*QueryCustomPrecompiledContractRequest)(nil), "evermint.cpc.v1.QueryCustomPrecompiledContractRequest")
	proto.RegisterType((*QueryCustomPrecompiledContractResponse)(nil), "evermint.cpc.v1.QueryCustomPrecompiledContractResponse")
	proto.RegisterType((*QueryErc20CustomPrecompiledContractByDenomRequest)(nil), "evermint.cpc.v1.QueryErc20CustomPrecompiledContractByDenomRequest")
	proto.RegisterType((*QueryErc20CustomPrecompiledContractByDenomResponse)(nil), "evermint.cpc.v1.QueryErc20CustomPrecompiledContractByDenomResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "evermint.cpc.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "evermint.cpc.v1.QueryParamsResponse")
}

func init() { proto.RegisterFile("evermint/cpc/v1/query.proto", fileDescriptor_ca8cc3676f804fa3) }

var fileDescriptor_ca8cc3676f804fa3 = []byte{
	// 690 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xcd, 0x6b, 0x13, 0x4f,
	0x18, 0xc7, 0xb3, 0x69, 0x7f, 0xf9, 0x35, 0xd3, 0x83, 0x30, 0x16, 0x9a, 0xa6, 0x9a, 0xd6, 0xb5,
	0x6f, 0x08, 0xee, 0x98, 0x48, 0x5f, 0x4e, 0x42, 0x53, 0x6b, 0x15, 0x7c, 0x89, 0xb9, 0x14, 0xbd,
	0x84, 0xc9, 0x66, 0x58, 0x17, 0x3a, 0x2f, 0xdd, 0x99, 0x04, 0x43, 0xe9, 0xa1, 0xde, 0x05, 0xc1,
	0x93, 0x7f, 0x81, 0xff, 0x89, 0xf4, 0xa0, 0x50, 0xf0, 0xe2, 0x49, 0xa4, 0xf5, 0x0f, 0x91, 0x9d,
	0x9d, 0x4d, 0x4c, 0xd2, 0xa4, 0x5d, 0x8a, 0xb7, 0xdd, 0xe7, 0x99, 0xe7, 0x3b, 0xdf, 0xcf, 0xb3,
	0xf3, 0xcc, 0x82, 0x59, 0xd2, 0x22, 0x01, 0xf5, 0x99, 0x42, 0xae, 0x70, 0x51, 0xab, 0x88, 0xf6,
	0x9b, 0x24, 0x68, 0x3b, 0x22, 0xe0, 0x8a, 0xc3, 0x6b, 0x71, 0xd2, 0x71, 0x85, 0xeb, 0xb4, 0x8a,
	0xf9, 0x3b, 0x2e, 0x97, 0x94, 0x4b, 0x54, 0xc7, 0x92, 0x44, 0x2b, 0x51, 0xab, 0x58, 0x27, 0x0a,
	0x17, 0x91, 0xc0, 0x9e, 0xcf, 0xb0, 0xf2, 0x39, 0x8b, 0x8a, 0xf3, 0x53, 0x1e, 0xf7, 0xb8, 0x7e,
	0x44, 0xe1, 0x93, 0x89, 0xde, 0xf0, 0x38, 0xf7, 0xf6, 0x08, 0xc2, 0xc2, 0x47, 0x98, 0x31, 0xae,
	0x74, 0x89, 0x34, 0xd9, 0x9b, 0xfd, 0x6e, 0x3c, 0xc2, 0x88, 0xf4, 0xe3, 0xf4, 0xad, 0xfe, 0xb4,
	0x08, 0x88, 0xcb, 0xa9, 0xf0, 0xf7, 0x88, 0x59, 0x62, 0x0b, 0xb0, 0xf4, 0x32, 0xf4, 0xb5, 0xd5,
	0x94, 0x8a, 0xd3, 0x4a, 0x27, 0xdf, 0xd8, 0xe2, 0x4c, 0x05, 0xd8, 0x55, 0xb2, 0x4a, 0xf6, 0x9b,
	0x44, 0x2a, 0xf8, 0x08, 0x80, 0xae, 0xe7, 0x9c, 0x35, 0x6f, 0xad, 0x4c, 0x96, 0x96, 0x9c, 0x08,
	0xd0, 0x09, 0x01, 0x9d, 0xa8, 0x15, 0x06, 0xd0, 0xa9, 0x60, 0x8f, 0x98, 0xda, 0xea, 0x5f, 0x95,
	0xf6, 0x67, 0x0b, 0x2c, 0xec, 0x06, 0x58, 0x08, 0xd2, 0x18, 0xba, 0xe9, 0x33, 0xa2, 0x30, 0xcc,
	0x81, 0xff, 0x71, 0xa3, 0x11, 0x10, 0x29, 0xf5, 0x6e, 0xd9, 0x6a, 0xfc, 0x0a, 0x67, 0x41, 0x56,
	0xb5, 0x05, 0xa9, 0x31, 0x4c, 0x49, 0x2e, 0xad, 0x73, 0x13, 0x61, 0xe0, 0x39, 0xa6, 0x04, 0x3e,
	0x06, 0xe3, 0x94, 0x28, 0x9c, 0x1b, 0xd3, 0x0e, 0x1d, 0xa7, 0xef, 0x9b, 0x38, 0x23, 0x37, 0x2d,
	0x8f, 0x1f, 0xff, 0x9c, 0x4b, 0x55, 0xb5, 0x82, 0xfd, 0xcd, 0x02, 0xcb, 0x17, 0x36, 0x47, 0x0a,
	0xce, 0x24, 0x81, 0xaf, 0x40, 0xd6, 0x8d, 0x83, 0x39, 0x6b, 0x7e, 0x6c, 0x65, 0xb2, 0xb4, 0x3a,
	0xb0, 0xf5, 0x65, 0xb0, 0x8d, 0x83, 0xae, 0x1a, 0xdc, 0xe9, 0x69, 0x7c, 0x5a, 0x63, 0x2d, 0x5f,
	0xd8, 0xf8, 0xc8, 0x57, 0x4f, 0xe7, 0x37, 0xc1, 0xe2, 0x68, 0x9c, 0xf8, 0x53, 0x0f, 0xed, 0xbc,
	0x7d, 0x64, 0x5d, 0x74, 0x5e, 0x3a, 0x1d, 0xd9, 0x05, 0x13, 0x31, 0x83, 0x39, 0x2d, 0x57, 0x6a,
	0x48, 0x47, 0xcc, 0xae, 0x80, 0xa2, 0xb6, 0xb0, 0x1d, 0xb8, 0xa5, 0x7b, 0x43, 0x4b, 0xcb, 0xed,
	0x87, 0x84, 0x71, 0x1a, 0x23, 0xcd, 0x82, 0x2c, 0xf5, 0x59, 0xad, 0x11, 0xc6, 0x0c, 0xd4, 0x04,
	0xf5, 0x99, 0x5e, 0x63, 0xbf, 0xb7, 0x40, 0x29, 0x89, 0xe4, 0xbf, 0x26, 0x9c, 0x02, 0x50, 0xdb,
	0xa9, 0xe0, 0x00, 0xd3, 0x78, 0x00, 0xed, 0xa7, 0xe0, 0x7a, 0x4f, 0xd4, 0xb8, 0x58, 0x05, 0x19,
	0xa1, 0x23, 0xc6, 0xc3, 0xf4, 0x80, 0x87, 0xa8, 0xc0, 0xec, 0x62, 0x16, 0x97, 0x3e, 0x65, 0xc0,
	0x7f, 0x5a, 0x0e, 0x7e, 0xb1, 0x40, 0x7e, 0xf8, 0x09, 0x87, 0xeb, 0x03, 0x7a, 0x97, 0xbb, 0x30,
	0xf2, 0x1b, 0xc9, 0x0b, 0x23, 0x24, 0x7b, 0xf5, 0xdd, 0xf7, 0xdf, 0x1f, 0xd3, 0x08, 0xde, 0x45,
	0xfd, 0x17, 0x98, 0xab, 0x8b, 0x6b, 0xdd, 0x7b, 0xac, 0x51, 0xeb, 0x0e, 0xca, 0x57, 0x0b, 0xcc,
	0x0c, 0x55, 0x87, 0x6b, 0x09, 0xed, 0xc4, 0x18, 0xeb, 0x89, 0xeb, 0x0c, 0xc5, 0x03, 0x4d, 0xb1,
	0x01, 0xd7, 0x92, 0x50, 0xa0, 0x03, 0x33, 0x6a, 0x87, 0xf0, 0x28, 0x0d, 0x16, 0x2f, 0x75, 0x20,
	0x61, 0xf9, 0x7c, 0x8b, 0x49, 0x06, 0x24, 0xbf, 0x75, 0x25, 0x0d, 0x83, 0xfc, 0x42, 0x23, 0x3f,
	0x81, 0x3b, 0x03, 0xc8, 0x24, 0xd4, 0xa9, 0x8d, 0x00, 0xaf, 0xd5, 0xdb, 0xd1, 0x74, 0xa2, 0x83,
	0xce, 0xa0, 0x1e, 0x42, 0x05, 0x32, 0xd1, 0xe9, 0x85, 0xb7, 0xcf, 0xf7, 0xd7, 0x33, 0x22, 0xf9,
	0x85, 0xd1, 0x8b, 0x8c, 0xcb, 0x39, 0xed, 0x72, 0x06, 0x4e, 0x0f, 0xb8, 0x8c, 0x66, 0xa3, 0xbc,
	0x79, 0x7c, 0x5a, 0xb0, 0x4e, 0x4e, 0x0b, 0xd6, 0xaf, 0xd3, 0x82, 0xf5, 0xe1, 0xac, 0x90, 0x3a,
	0x39, 0x2b, 0xa4, 0x7e, 0x9c, 0x15, 0x52, 0xaf, 0x97, 0x3d, 0x5f, 0xbd, 0x69, 0xd6, 0x1d, 0x97,
	0x53, 0xb4, 0x2d, 0x5d, 0xcc, 0xca, 0xdb, 0x5d, 0x91, 0xb7, 0x5a, 0x26, 0xfc, 0x11, 0xc9, 0x7a,
	0x46, 0xff, 0x5e, 0xef, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x37, 0xd3, 0x1d, 0x30, 0x08,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// CustomPrecompiledContracts queries the list of deployed custom precompiled contracts.
	CustomPrecompiledContracts(ctx context.Context, in *QueryCustomPrecompiledContractsRequest, opts ...grpc.CallOption) (*QueryCustomPrecompiledContractsResponse, error)
	// CustomPrecompiledContract queries the list of deployed custom precompiled contract.
	CustomPrecompiledContract(ctx context.Context, in *QueryCustomPrecompiledContractRequest, opts ...grpc.CallOption) (*QueryCustomPrecompiledContractResponse, error)
	// Erc20CustomPrecompiledContractByDenom queries the list of deployed custom precompiled contract by denom.
	Erc20CustomPrecompiledContractByDenom(ctx context.Context, in *QueryErc20CustomPrecompiledContractByDenomRequest, opts ...grpc.CallOption) (*QueryErc20CustomPrecompiledContractByDenomResponse, error)
	// Params queries the parameters of x/cpc module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) CustomPrecompiledContracts(ctx context.Context, in *QueryCustomPrecompiledContractsRequest, opts ...grpc.CallOption) (*QueryCustomPrecompiledContractsResponse, error) {
	out := new(QueryCustomPrecompiledContractsResponse)
	err := c.cc.Invoke(ctx, "/evermint.cpc.v1.Query/CustomPrecompiledContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CustomPrecompiledContract(ctx context.Context, in *QueryCustomPrecompiledContractRequest, opts ...grpc.CallOption) (*QueryCustomPrecompiledContractResponse, error) {
	out := new(QueryCustomPrecompiledContractResponse)
	err := c.cc.Invoke(ctx, "/evermint.cpc.v1.Query/CustomPrecompiledContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Erc20CustomPrecompiledContractByDenom(ctx context.Context, in *QueryErc20CustomPrecompiledContractByDenomRequest, opts ...grpc.CallOption) (*QueryErc20CustomPrecompiledContractByDenomResponse, error) {
	out := new(QueryErc20CustomPrecompiledContractByDenomResponse)
	err := c.cc.Invoke(ctx, "/evermint.cpc.v1.Query/Erc20CustomPrecompiledContractByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/evermint.cpc.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// CustomPrecompiledContracts queries the list of deployed custom precompiled contracts.
	CustomPrecompiledContracts(context.Context, *QueryCustomPrecompiledContractsRequest) (*QueryCustomPrecompiledContractsResponse, error)
	// CustomPrecompiledContract queries the list of deployed custom precompiled contract.
	CustomPrecompiledContract(context.Context, *QueryCustomPrecompiledContractRequest) (*QueryCustomPrecompiledContractResponse, error)
	// Erc20CustomPrecompiledContractByDenom queries the list of deployed custom precompiled contract by denom.
	Erc20CustomPrecompiledContractByDenom(context.Context, *QueryErc20CustomPrecompiledContractByDenomRequest) (*QueryErc20CustomPrecompiledContractByDenomResponse, error)
	// Params queries the parameters of x/cpc module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) CustomPrecompiledContracts(ctx context.Context, req *QueryCustomPrecompiledContractsRequest) (*QueryCustomPrecompiledContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomPrecompiledContracts not implemented")
}
func (*UnimplementedQueryServer) CustomPrecompiledContract(ctx context.Context, req *QueryCustomPrecompiledContractRequest) (*QueryCustomPrecompiledContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomPrecompiledContract not implemented")
}
func (*UnimplementedQueryServer) Erc20CustomPrecompiledContractByDenom(ctx context.Context, req *QueryErc20CustomPrecompiledContractByDenomRequest) (*QueryErc20CustomPrecompiledContractByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Erc20CustomPrecompiledContractByDenom not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_CustomPrecompiledContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCustomPrecompiledContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CustomPrecompiledContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evermint.cpc.v1.Query/CustomPrecompiledContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CustomPrecompiledContracts(ctx, req.(*QueryCustomPrecompiledContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CustomPrecompiledContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCustomPrecompiledContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CustomPrecompiledContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evermint.cpc.v1.Query/CustomPrecompiledContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CustomPrecompiledContract(ctx, req.(*QueryCustomPrecompiledContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Erc20CustomPrecompiledContractByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryErc20CustomPrecompiledContractByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Erc20CustomPrecompiledContractByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evermint.cpc.v1.Query/Erc20CustomPrecompiledContractByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Erc20CustomPrecompiledContractByDenom(ctx, req.(*QueryErc20CustomPrecompiledContractByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evermint.cpc.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evermint.cpc.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CustomPrecompiledContracts",
			Handler:    _Query_CustomPrecompiledContracts_Handler,
		},
		{
			MethodName: "CustomPrecompiledContract",
			Handler:    _Query_CustomPrecompiledContract_Handler,
		},
		{
			MethodName: "Erc20CustomPrecompiledContractByDenom",
			Handler:    _Query_Erc20CustomPrecompiledContractByDenom_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evermint/cpc/v1/query.proto",
}

func (m *QueryCustomPrecompiledContractsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCustomPrecompiledContractsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCustomPrecompiledContractsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WrappedCustomPrecompiledContractMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WrappedCustomPrecompiledContractMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WrappedCustomPrecompiledContractMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.TypeName) > 0 {
		i -= len(m.TypeName)
		copy(dAtA[i:], m.TypeName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TypeName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCustomPrecompiledContractsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCustomPrecompiledContractsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCustomPrecompiledContractsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contracts) > 0 {
		for iNdEx := len(m.Contracts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contracts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCustomPrecompiledContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCustomPrecompiledContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCustomPrecompiledContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCustomPrecompiledContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCustomPrecompiledContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCustomPrecompiledContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Contract.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryErc20CustomPrecompiledContractByDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryErc20CustomPrecompiledContractByDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryErc20CustomPrecompiledContractByDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinDenom) > 0 {
		i -= len(m.MinDenom)
		copy(dAtA[i:], m.MinDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MinDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryErc20CustomPrecompiledContractByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryErc20CustomPrecompiledContractByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryErc20CustomPrecompiledContractByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Contract.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryCustomPrecompiledContractsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *WrappedCustomPrecompiledContractMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TypeName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Meta.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCustomPrecompiledContractsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contracts) > 0 {
		for _, e := range m.Contracts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCustomPrecompiledContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCustomPrecompiledContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Contract.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryErc20CustomPrecompiledContractByDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MinDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryErc20CustomPrecompiledContractByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Contract.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryCustomPrecompiledContractsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCustomPrecompiledContractsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCustomPrecompiledContractsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WrappedCustomPrecompiledContractMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WrappedCustomPrecompiledContractMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WrappedCustomPrecompiledContractMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCustomPrecompiledContractsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCustomPrecompiledContractsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCustomPrecompiledContractsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contracts = append(m.Contracts, WrappedCustomPrecompiledContractMeta{})
			if err := m.Contracts[len(m.Contracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCustomPrecompiledContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCustomPrecompiledContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCustomPrecompiledContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCustomPrecompiledContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCustomPrecompiledContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCustomPrecompiledContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryErc20CustomPrecompiledContractByDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryErc20CustomPrecompiledContractByDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryErc20CustomPrecompiledContractByDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryErc20CustomPrecompiledContractByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryErc20CustomPrecompiledContractByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryErc20CustomPrecompiledContractByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
